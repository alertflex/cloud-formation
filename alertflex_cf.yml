AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Alertflex template

Parameters:
  
  InstanceType:
    Description: Alertflex EC2 instance type
    Type: String
    Default: t2.large
    AllowedValues: [t2.large, t2.xlarge, t2.2xlarge,
      t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  
  DiskSize:
    Description: Set the properties of the root volume for your EC2 instance
    Type: String
    Default: 80
    ConstraintDescription: must be a valid root volume size.
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of location for Alertflex EC2 
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    
  SubnetID:
    Description: Subnet ID
    Type: AWS::EC2::Subnet::Id
  
  PrivateLocation:
    Description: The IP address range that can be used for access via ActiveMQ, Redis, Wazuh ports to the Alertflex EC2 instance.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.16.0.0/12
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  PublicLocation:
    Description: The IP address range that can be used for access via SSH and HTTPS to the Alertflex EC2 instance.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  AdminPassword:
    NoEcho : 'true'
    Description: Password for admin user
    Type: String
    
  IntegrationFW:
    Description: Integrate AWS Network Firewall with Alertflex EC2 instance.
    Default: No
    Type: String
    AllowedValues:
      - No
      - Yes
  
  IntegrationWAF:
    Description: Integrate Amazon WAF with Alertflex EC2 instance.
    Default: No
    Type: String
    AllowedValues:
      - No
      - Yes
      
  MispInstall:
    Description: Install MISP
    Default: internal
    Type: String
    AllowedValues:
      - internal
      - external

Conditions:
  CreateIntegrationFW: !Equals [ !Ref IntegrationFW, Yes ]
  CreateIntegrationWAF: !Equals [ !Ref IntegrationWAF, Yes ]
  
Resources:
  
  AlertflexInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: output public dns name
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              git: []
          files:
            "/home/ec2-user/cr_env_ami.sh":
              content: !Sub |
                #!/bin/bash
                pwd=${AdminPassword}
                project_id=$(cat /proc/sys/kernel/random/uuid)
                public_hostname=`curl http://169.254.169.254/latest/meta-data/public-hostname`
                misp_port=':8443'
                misp_url=$public_hostname$misp_port
                misp_install=${MispInstall} 
                echo "#!/bin/bash" >> /home/ec2-user/cnode/env_ami.sh
                echo "export ADMIN_HOST=$public_hostname" >> /home/ec2-user/cnode/env_ami.sh
                echo "export ADMIN_PWD=$pwd" >> /home/ec2-user/cnode/env_ami.sh
                echo "export DB_PWD=$pwd" >> /home/ec2-user/cnode/env_ami.sh
                echo "export AMQ_CN=$public_hostname" >> /home/ec2-user/cnode/env_ami.sh
                echo "export AMQ_PWD=$pwd" >> /home/ec2-user/cnode/env_ami.sh
                echo "export PROJECT_ID=$project_id" >> /home/ec2-user/cnode/env_ami.sh
                echo "export INSTALL_MISP=$misp_install" >> /home/ec2-user/cnode/env_ami.sh
                echo "export MISP_URL=$misp_url" >> /home/ec2-user/cnode/env_ami.sh 
                echo "export AMQ_PWD=$pwd" >> /home/ec2-user/altprobe/env_ami.sh
                echo "export PROJECT_ID=$project_id" >> /home/ec2-user/altprobe/env_ami.sh
              mode: '755'
              owner: ec2-user
              group: ec2-user
          commands:
            step1:
              command: "git clone --single-branch --branch develop https://github.com/alertflex/cnode.git"
              cwd: "/home/ec2-user"
            step2:
              command: "git clone https://github.com/alertflex/altprobe.git"
              cwd: "/home/ec2-user"
            step3:
              command: "./cr_env_ami.sh"
              cwd: "/home/ec2-user"
            step4:
              command: "chmod u+x install_cf.sh"
              cwd: "/home/ec2-user/cnode"
            step5:
              command: "./install_cf.sh"
              cwd: "/home/ec2-user/cnode"
            step6:
              command: "chmod u+x install_cf.sh"
              cwd: "/home/ec2-user/altprobe"
            step7:
              command: "./install_cf.sh"
              cwd: "/home/ec2-user/altprobe"
              
    Properties:
      ImageId: ami-0c2b8ca1dad447f8a
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      SubnetId: !Ref 'SubnetID'
      SecurityGroupIds:
          - !GetAtt 'ServerSecurityGroup.GroupId'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref 'DiskSize'
            DeleteOnTermination: 'false'
            Encrypted: 'true'
            
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            
            # Get the latest CloudFormation helper scripts
            yum install -y aws-cfn-bootstrap
            
            # Start cfn-init
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource AlertflexInstance --region ${AWS::Region}
            
            # cfn-init completed so signal success or not
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AlertflexInstance --region ${AWS::Region}
  
  ServerSecurityGroup:
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: allow connections from specified CIDR ranges
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 61617
        ToPort: 61617
        CidrIp: !Ref 'PrivateLocation'
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        CidrIp: !Ref 'PublicLocation'
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: !Ref 'PrivateLocation'
      - IpProtocol: tcp
        FromPort: 1514
        ToPort: 1514
        CidrIp: !Ref 'PrivateLocation'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref 'PublicLocation'
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'PublicLocation'
  
  IPAddress:
    Type: AWS::EC2::EIP
  
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'AlertflexInstance'
      EIP: !Ref 'IPAddress' 

  LambdaKinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
              - firehose.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
      Path: /

  LambdaFunctionFW:
    Type: AWS::Lambda::Function
    Condition: CreateIntegrationFW
    Properties:
      Code: 
        S3Bucket: lambda-alertflex
        S3Key: fw-redirect.zip
      Role:
        Fn::GetAtt:
          - LambdaKinesisRole
          - Arn
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt 'ServerSecurityGroup.GroupId'
        SubnetIds:
          - !Ref 'SubnetID'
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Environment:
        Variables:
          RedisAddressEnvName: !GetAtt 'AlertflexInstance.PrivateIp'

  BucketAlertsFW:
    Type: AWS::S3::Bucket
    Condition: CreateIntegrationFW
    Properties: {}
    
  BucketNetflowFW:
    Type: AWS::S3::Bucket
    Condition: CreateIntegrationFW
    Properties: {}
    
  KinesisAlertsFW:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: CreateIntegrationFW
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN:
          Fn::GetAtt:
            - BucketAlertsFW
            - Arn 
        RoleARN:
          Fn::GetAtt:
            - LambdaKinesisRole
            - Arn
        ProcessingConfiguration:
          Enabled: 'true'
          Processors: 
            - Type: 'Lambda'
              Parameters: 
              - ParameterName: 'LambdaArn'
                ParameterValue: 
                  Fn::GetAtt:
                    - LambdaFunctionFW
                    - Arn    

  KinesisNetflowFW:
    Condition: CreateIntegrationFW
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN:
          Fn::GetAtt:
            - BucketNetflowFW
            - Arn 
        RoleARN:
          Fn::GetAtt:
            - LambdaKinesisRole
            - Arn
        ProcessingConfiguration:
          Enabled: 'true'
          Processors: 
            - Type: 'Lambda'
              Parameters: 
              - ParameterName: 'LambdaArn'
                ParameterValue: 
                  Fn::GetAtt:
                    - LambdaFunctionFW
                    - Arn 
                    
  LambdaFunctionWaf:
    Type: AWS::Lambda::Function
    Condition: CreateIntegrationWAF
    Properties:
      # Replace <bucket> with your bucket name
      Code: 
        S3Bucket: lambda-alertflex
        S3Key: waf-redirect.zip
      Role:
        Fn::GetAtt:
          - LambdaKinesisRole
          - Arn
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt 'ServerSecurityGroup.GroupId'
        SubnetIds:
          - !Ref 'SubnetID'
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Environment:
        Variables:
          RedisAddressEnvName: !GetAtt 'AlertflexInstance.PrivateIp'

  BucketLogsWaf:
    Type: AWS::S3::Bucket
    Condition: CreateIntegrationWAF
    Properties: {}
    
  KinesisStreamWaf:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: CreateIntegrationWAF
    Properties:
      DeliveryStreamName: aws-waf-logs-alertflex
      ExtendedS3DestinationConfiguration:
        BucketARN:
          Fn::GetAtt:
            - BucketLogsWaf
            - Arn 
        RoleARN:
          Fn::GetAtt:
            - LambdaKinesisRole
            - Arn
        ProcessingConfiguration:
          Enabled: 'true'
          Processors: 
            - Type: 'Lambda'
              Parameters: 
              - ParameterName: 'LambdaArn'
                ParameterValue: 
                  Fn::GetAtt:
                    - LambdaFunctionWaf
                    - Arn  

Outputs:

  NameKinesisAlertsFW:
    Condition: CreateIntegrationFW
    Description: Name 
    Value: !Ref KinesisAlertsFW
    Export:
      Name: KinesisAlertsFW   

  NameKinesisNetflowFW:
    Condition: CreateIntegrationFW
    Description: Name 
    Value: !Ref KinesisNetflowFW
    Export:
      Name: KinesisNetflowFW
